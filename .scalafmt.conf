// cp ~/code/osx-env/config/scalafmt.conf .scalafmt.conf
// cp .scalafmt.conf ~/code/osx-env/config/scalafmt.conf

// 最大宽度
maxColumn = 100

encoding = UTF-8
docstrings = ScalaDoc
lineEndings = unix

// 函数调用换行缩进
continuationIndent.callSite = 2

// 函数定义换行缩进
continuationIndent.defnSite = 4

newlines.alwaysBeforeTopLevelStatements = true
//newlines.sometimesBeforeColonInMethodReturnType = false
newlines.alwaysBeforeCurlyBraceLambdaParams = true
//newlines.afterImplicitKWInVerticalMultiline = true
//newlines.beforeImplicitKWInVerticalMultiline = true

//
newlines.alwaysBeforeCurlyBraceLambdaParams = false

// 多行字符串
assumeStandardLibraryStripMargin = true

align.tokenCategory {
  Equals = Assign
  LeftArrow = Assign
}

align = more
align.arrowEnumeratorGenerator = true
align.tokenCategory.Equals = Assign
align.tokenCategory.LeftArrow = Assign
align.tokens = [
  "//"
  "="
  "==>"
  "<-"
  "->"
  {code = "=>", owner = "Case"}
  {code = "extends", owner = "Defn.(Class|Trait|Object)"}
  {code = "=", owner = "(Enumerator.Val|Defn.(Va(l|r)|Def|Type))"}
  //  {code = ":", owner = "(applyInfix|Defn.(Va(l|r)|Def|Type))"}
  ":"
  ":="
  "=:"
  "+="
  "-="
  "*="
  "%"
  "%%"
  "%%%"
  {code = "{", owner = "Template"}
  {code = "}", owner = "Template"}

]
align.treeCategory {
  Case: Assign
  "Enumerator.Generator": Assign
}

//rewrite.rules = [RedundantBraces, RedundantParens]

# Only format files tracked by git.
project.git = false


# manually exclude files to format.
//project.excludeFilters = [
//  regex1
//  regex2
//]
# manually include files to format.
project.includeFilters = [
  ".*\\.scala$"
  ".*\\.sbt$"
  ".*\\.sc$"
]
